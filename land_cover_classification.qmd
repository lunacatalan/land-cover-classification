---
title: 'Land Cover Classification with Decision Tree'
author: "Luna Herschenfeld-Catalan"
date: "2022-12-03"
output:
    html_document:
      print_df: paged
      toc: yes
      toc_depth: 4
      toc_float: yes
---

# Background

Tracking changes in land cover types is important to understanding how phenomena such as urbanization, deforestation, climate change, and natural disasters affect areas. Being able to identify land cover types using remote sensing tools offers the opportunity to derive more meaning from data we already have. Identifying land cover types from remotely sensed imagery involves classifying spectral reflectance of different land cover types. This can be achieved by two methods:

The first approach is *supervised*. This involves **training data** which is pre-labeled by the user, and has already assigned the land cover types to spectral reflectance groups. The second approach is *unsupervised*. This involves the use of **algorithms** that create groups in the data, and those groups are assigned to a land cover type by the user afterwards.

Here, we will use a supervised approach to classify land cover types as green vegetation, soil/dead grass, urban areas, or water for Southern Santa Barbara County.

## Goals

-   Train a decision tree classifier using spectral reflectance data
-   Classify land cover types of Southern Santa Barbara County

## Datasets

### 1. Landsat 5 Thematic Mapper

The landsat data is from [Landsat 5](https://www.usgs.gov/landsat-missions/landsat-5), and we will be using 1 scene from September 25, 2007. - bands: 1, 2, 3, 4, 5, 7 - Collection 2 surface reflectance product\

The data is stored in the folder `landsat-data`: - `LT05_L2SP_042036_20070925_20200829_02_T1_SR_B1` - `LT05_L2SP_042036_20070925_20200829_02_T1_SR_B2` - `LT05_L2SP_042036_20070925_20200829_02_T1_SR_B3` - `LT05_L2SP_042036_20070925_20200829_02_T1_SR_B4` - `LT05_L2SP_042036_20070925_20200829_02_T1_SR_B5` - `LT05_L2SP_042036_20070925_20200829_02_T1_SR_B6` - `LT05_L2SP_042036_20070925_20200829_02_T1_SR_B7`

### 2. Study area and training data

The polygon representing southern Santa Barbara county is stored in the `SB_county_south` folder: - `SB_county_south.shp`

The polygons representing training sites is stored in the `trainingdata` folder: - `trainingdata.shp` - type: character string with land cover type.\

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load Libraries

```{r include=TRUE, message=FALSE, warning=FALSE}
library(sf)
library(terra)
library(here)
library(dplyr)
library(rpart)
library(rpart.plot)
library(tmap)

```

# Prepare the data

## Read in Landsat data

Load all of the landsat images using a list of the files in the data folder.

```{r include=TRUE, message=FALSE, warning=FALSE}
# list files for each band, including the full file path
filelist <- list.files("data/landsat-data/", # say what folder to read the files in 
                       full.names = TRUE) # absolute path

# read in and store as a raster stack
landsat <- rast(filelist)
```

Rename the layers to match the bands they correspond to so that we can plot the image. We set the `plotRGB` channels to the true colors that they represent to see a true color image of Southern Santa Barbara County.\

```{r include=TRUE, message=FALSE, warning=FALSE}
# update layer names to match band
names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
landsat

# plot true color image
plotRGB(landsat, 
        r = 3, # band number defined above
        g = 2,
        blue = 1,
        stretch = "lin") # apply to see more differences in values 
```

## Read in data for Southern Santa Barbara

I want to crop the landsat image to only southern SB. To get that geometry we need to load in a shapefile of southern SB and transform it to have a matching crs as the landsat image. 

```{r include=TRUE, message=FALSE, warning=FALSE}

# read in shapefile for southern portion of SB county
sb_county_south <- st_read("data/SB_county_south/SB_county_south.shp")

# project to match the Landsat data
sb_county_south <- st_transform(sb_county_south, 
             crs = st_crs(landsat))

plot(sb_county_south)
```

## Crop the Landsat data to our region of interest: Southern SB

```{r include=TRUE, message=FALSE, warning=FALSE}

# crop Landsat scene to the extent of the SB county shapefile
landsat_cropped <- crop(landsat, sb_county_south)

# mask the raster to southern portion of SB county
landsat_masked <- mask(landsat_cropped, sb_county_south)

# remove unnecessary object from environment
rm(landsat, landsat_cropped, sb_county_south)
```

### Convert values in raster stack to reflectance values based on the valid range of pixel values in the Landsat Collection 2 data

The valid range was from 7273 to 43636
```{r include=TRUE, message=FALSE, warning=FALSE}
summary(landsat_masked)
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA, 
                43636, Inf, NA),
              ncol = 3, byrow = TRUE)
landsat <- classify(landsat_masked, rcl = rcl)
summary(landsat) # see it's removed the errant values
```

We need to adjust the values based on the scaling factor provided by the landsat metadata. 

```{r include=TRUE, message=FALSE, warning=FALSE}
# adjust values based on scaling factor
landsat <- ((landsat * 0.0000275) - 0.2)*100 # returns % reflectance

summary(landsat) # now range from 0-100
# plot true color image to check results
plotRGB(landsat)
```

# Image Classification on training data

### Read in training data

This shapefile has identified the locations in Santa Barbara with 4 different land cover types. We will use this to match their spectral reflectance with land cover types to train our model.

```{r include=TRUE, message=FALSE, warning=FALSE}
# read in and transform training data
training_data <- st_read("data/trainingdata/trainingdata.shp") %>% 
  st_transform(., # holds the space for the data being piped in
               crs = st_crs(landsat))

# extract reflectance values at training sites
training_data_values <- extract(landsat,
                                training_data, # extract at this dataset
                                df = TRUE)

# convert training data to data frame
training_data_attributes <- training_data %>% 
  st_drop_geometry()

# join training data attributes and extracted reflectance values
sb_training_data <- left_join(training_data_values,
          training_data_attributes,
          by = c("ID" = "id")) %>% 
  mutate(type = as.factor(type))
```

### Train the decision tree classification tool

Create the formula with the same names of the spectral bands that we loaded in earlier with the landsat data. They need to match so that we can apply the tree to the landsat data later on. 

For the decision tree, apply the formula we just created on the training data. Then plot the tree to see how it classified the data in the training data.

```{r include=TRUE, message=FALSE, warning=FALSE}
# establish model formula
sb_formula <- type ~ red + green + blue + NIR + SWIR1 + SWIR2

# train decision tree
decision_tree <- rpart(formula = sb_formula,
                       data = sb_training_data,
                       method = "class", # because we are doing categorical classification
                       na.action = na.omit) # remove NAs 

# plot decision tree
prp(decision_tree)
```

First decision was using NIR to ask "is it water or not", then it went on to red to determine "is it green vegetation"...and on and on and on. Can see what is deciding each category.

# Apply Decision Tree to Southern SB Data

Classify the landsat image using the decision tree classes defined above:

```{r include=TRUE, message=FALSE, warning=FALSE}
# classify image based on decision tree
# should be a raster
sb_classification <- predict(landsat, # data to apply decision tree to
                             decision_tree, 
                             type = "class",
                             na.rm = TRUE)

# inspect level to understand the order of classes in prediction
sb_classification
```

#### Plot Land Cover Map

This visualization shows the areas classified into four different land cover types as defined by our training data. 

```{r include = TRUE, message=FALSE, warning=FALSE}

# plot results
base <- tm_shape(sb_classification) +
  tm_raster(col.legend = tm_legend(title = "Land Classifications"))

base +
  tm_scalebar(position=c("left", "bottom")) + # add scalebar
  tm_compass(position=c("RIGHT", "TOP")) + # add compass
  tm_graticules(alpha = 0.2) # make lat and long lines light

```
